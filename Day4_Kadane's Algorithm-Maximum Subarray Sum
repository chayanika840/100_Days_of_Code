//Kadane's Algorithm-Maximum Subarray Sum
#include <iostream>
#include<climits>
using namespace std;
int maxSubArraySum(int a [], int size)
{
    int max_so_far=INT_MIN, max_ending_here=0;
    for(int i=0;i<size;i++)
    {
        max_ending_here=max_ending_here+a[i];
        if(max_so_far<max_ending_here)
        max_so_far=max_ending_here;
        if(max_ending_here<0)
        max_ending_here=0;
    }
    return max_so_far;
}
int main(){
    int a[]={-2,-1,4,-2,-1,1,5,-3};
    int n=sizeof(a)/sizeof(a[0]);
    int max_sum=maxSubArraySum(a,n);
    cout<<"Maximum contiguous sum in the subarray is: "<<max_sum;
    return 0;
}





//ON LEET CODE
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = size(nums), ans = INT_MIN;
        for(int i = 0; i < n; i++) 
            for(int j = i, curSum = 0; j < n ; j++) 
                curSum += nums[j],
                ans = max(ans, curSum);        
        return ans;
    };
};
