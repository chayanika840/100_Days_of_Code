//Time Complexity: O(nm) 
//Space Complexity :O(nm)
//For example, "ace" is a subsequence of "abcde".
//A common subsequence of two strings is a subsequence that is common to both strings.
/*/The idea is to use dynamic programming.
Create a 2D DP array of n+1*m+1 dimensions
 I am using the bottom up dp approach so i have iterated from text1.length()-1 to 0 and text2.length()-1 to 0
if the characters match,we do 1+ the diagnal value dp[i+1][j+1]
else we find the max between left and bottom value max(dp[i][j+1],dp[i+1][j])
return the dp[0][0] as it will have the value for longest common Subsequence /*/


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
         int [][]dp = new int[text1.length()+1][text2.length()+1];    
        for(int i= text1.length()-1;i>=0;i--){
            for(int j = text2.length()-1;j>=0;j--){
                char ch1 = text1.charAt(i);
                char ch2 = text2.charAt(j);
                if(ch1==ch2) // diagnal
                dp[i][j]= 1+dp[i+1][j+1];
                else// left,down
                    dp[i][j] = Math.max(dp[i][j+1],dp[i+1][j]);
                    
            }
        }
        return dp[0][0];
    }
}
