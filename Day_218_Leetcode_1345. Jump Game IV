//agar element same hue jaise 100 aur 100 toh hum waha jump kr sakte..ab 100 se 404 pr aye bcoz last element humare array ka 404 hai..phir 3rd element se last pr ja sakte kyuki 404 aur 3rd element same hai..siraf woh 3 conditions pr he hum work kr sakte hain..Hash map use krenge iske liye bcoz humko store krna hai jis element pr hum aye n uska index in terms for key-value pair..aur ise sabse kam time n space complexity bhi ayegi..phir loop laga kr check krte hain till we reach the last element using the conditions given..
//this was a hard one seriously  :(

class Solution {
    public int minJumps(int[] arr) {
         final int n = arr.length;
    // {a: indices}
    Map<Integer, List<Integer>> graph = new HashMap<>();
    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(0));
    boolean[] seen = new boolean[n];
    seen[0] = true;

    for (int i = 0; i < n; ++i) {
      graph.putIfAbsent(arr[i], new ArrayList<>());
      graph.get(arr[i]).add(i);
    }

    for (int steps = 0; !q.isEmpty(); ++steps) {
      for (int sz = q.size(); sz > 0; --sz) {
        final int i = q.poll();
        if (i == n - 1)
          return steps;
        seen[i] = true;
        final int u = arr[i];
        if (i + 1 < n)
          graph.get(u).add(i + 1);
        if (i - 1 >= 0)
          graph.get(u).add(i - 1);
        for (final int v : graph.get(u)) {
          if (seen[v])
            continue;
          q.offer(v);
        }
        graph.get(u).clear();
      }
    }

    throw new IllegalArgumentException();   
    }
}
