//ismein priority queue ka use hoga idhar..
//A priority queue is a type of queue that arranges elements based on their priority values. Elements with higher priority values are typically retrieved before elements with lower priority values.
//In a priority queue, each element has a priority value associated with it. When you add an element to the queue, it is inserted in a position based on its priority value.

//Sort stones descendingly in PriorityQueue, then pop out pair by pair, compute the difference between them and add back to PriorityQueue.
//Since we already know the first poped out is not smaller, it is not necessary to use Math.abs().

class Solution {
    public int lastStoneWeight(int[] stones) {
        //Initialize Priority Queue to Max Heap
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);
         
        //add all elements of stones array to priority queue
        for(int stone: stones){
            pq.add(stone);
        }
         
        //Loop until the heap has atleast two elements.
        while(pq.size() >= 2){
             
            //Pop out the two max elements
            int x = pq.poll();
            int y = pq.poll();
             
            //Push the difference between the two values back into the queue
            if(x != y){
                pq.add(x - y);
            }
        }
         
        // return 0 is queue is empty, else the top element
        return pq.isEmpty() ? 0 : pq.poll();
    }
}
