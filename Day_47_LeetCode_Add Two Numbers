/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { //2 linked lists banayai
        ListNode* l3=new ListNode(0);  //ek additional list banayi to store data jab sum krenege
        int carry=0;   //ek place pr he fill krenge data in l3 toh jo carry over ayega usko maintain krne ke liye
        ListNode* head=l3;  //pointer kro head se start
        while(l1 && l2){
            int value=l1->val+l2->val+carry;
            carry=value/10;  //ab hume check krna hai apna sum/10 kra
            l3->next=new ListNode(value%10); //value%10 to check n take carry
            l3=l3->next;
            l1=l1->next;
            l2=l2->next; //keep pointing to next element in each list
            
        }
        while(l1){ //case jab l1>l2 hai toh ye work kre
            int value=l1->val+carry;
            carry=value/10;
            l3->next=new ListNode(value%10);
            l3=l3->next;
            l1=l1->next;             //didnt count l2 ka pointer bcoz l1>l2 hai
        }
        
        while(l2){  //case jab l1<l2 hai toh ye work kre
            int value=l2->val+carry;
            carry=value/10;
            l3->next=new ListNode(value%10);
            l3=l3->next;
            l2=l2->next;        //didnt count l1 ka pointer bcoz l1<l2 hai
    }
        if(carry){
            l3->next=new ListNode(carry); //jab last mein ek carry remaining reh jayega uska test case pass krne ke liye we have to take up and go to head of the node to print the entire linked list
        }
        return head->next;  //simple tactic to print entire linked list
    } 
};
