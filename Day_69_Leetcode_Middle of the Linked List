//Middle of linked list
//1 2 3 4 5
//    -      3 would be output here

//1 2 3 4 5 6
//      -     4 would be output here


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Brute force approch...First i am gonna iteraate and count the number of nodes n =5 then didivede by 2 then add 1 to it..so n=5/2+1=3..after this start again from 1st node then keep moving dummy node when oterations =3 are complete..the pointing of dummy node is the answer..this is for odd number of iterations/terms ..
//for even number of iterations we get n=6/2+1=4 do 4 iterations n whereever 4th iteration dummy node points is the result or output of it. Time complexity: O(N)+O(N/2), Spce complexity: O(1)

//Optimized Approach: Tortoise approach is used. 2 tortoises are used here..one is slow tortoise starting from head n jumps by 1 and one is the fast tortoise which jumps by 2. the moment fast tortoise reaches the last node or end of linked list as head->null,  the slow torotise will have reached the midddle of the linked list which is our answer for the odd number.

// for even numbered same procedure till fast reaches the end and head->null or crosses the end of linked list..second wala print krna hai..slow will have reached the middle (4) in this example.., agar first middle pr rokna hota toh hum second last fast pointer ko consider krte information store krte n slow pointer phir first wale middle ko point krta..

//Time complexity of optimized approach: O(N/2), Space Complexity:O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow=head, fast=head;
        while(fast !=null && fast.next !=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
