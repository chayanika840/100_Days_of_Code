/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// hashing is naive approach.brute force appraoch...complete node ko push kr diya using the dummy node..same process repeat the moment it comes back to same eleemnt/node we find the node already exisiting in hash table so traverse krte time mil jayega..agar no cycle toh null last pr aajayega n we end the hash table /..Time complexity: O(N), Space complexity: O(N)

//Optimized apporach : 2 dummy nodes slow pointer n fast pointer..slow pointer moves by 1 step and fast pointer by 2 steps..iterate krte rangege ..slow n fast pointer meet at the cycle or loop ka starting jaise he mile toh they will collide n exactly at same point n there exists a cycle.. agar no cycle then fast n slow will not collide n null reach hoga for fast pointer n no cycle exists therefore null ajayega...Time complexity:O(N), Space complexity: O(1)


public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head== null || head.next==null)
            return false;
        
        ListNode fast=head;
        ListNode slow=head;
        
        while(fast.next !=null && fast.next.next !=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow)
                return true;
        }
        return false;
    }
}
